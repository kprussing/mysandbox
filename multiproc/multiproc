#!/usr/bin/env python
__info__="""
    This is a script to develop my understanding of the multiprocessing
    module in Python.  The general structure is taken from the program I
    am trying to multi-thread.  I am also interested in how the logging
    works.

    Keith Prussing 2013-12-19
"""
import argparse
import logging
import multiprocessing
import random
import sys
import time

# Add the default logging handler and level for the file.
logging.getLogger(__file__).addHandler( logging.NullHandler() )
logging.getLogger(__file__).setLevel( logging.DEBUG )

class worker:
    """
    This class is necessary in order to utilize a queue to return the
    results to compute a block.
    """
    queue = multiprocessing.Queue(-1)

    def f(self, array, I, J):
        "This just wraps the call to get a block."
        array.get_block(I,J, self.queue)
        return
    # end def f

# end class worker

class MyClass:
    """
    The main data structure on which operations are performed.  In the
    real program, this is a class that holds a block matrix.  Each block
    of the matrix my be populated independent of the rest.
    """

    def __init__(self, nblocks):
        """
        Create a place holder for what is the real matrix.  The idea is
        that the assemble routine will populate the member with real
        data.
        """
        self.matrix = [None for i in range(nblocks)]
    # end def __init__

    def assemble(self):
        """
        Populate the 'matrix.'
        """
        logger = logging.getLogger(__file__ +".MyClass.assemble")
        logger.debug("Begin assembly...")
        #
        # Create a pool of workers.
        pool = multiprocessing.Pool()

        # The original implementation uses a queue to get the blocks of
        # the matrix.  In order for the queue to work with a pool, we 
        # must wrap our function call.
        w = worker()

        # Populate the pool with the workers.  We need to save all of
        # the results so that we may check them.
        results = []
        for I in range(len(self.matrix)):
            J = random.randrange(len(self.matrix))
            # We use asynchronous apply so that we may have multiple
            # arguments and not have to wait for everything to complete.
            results.append( pool.apply_async(w.f, (self, I, J)) )
        # end for
        pool.close()
        #
        # Now we check the output in the queue.
        while True:
            I, J, dt = w.queue.get()
            logger.info("({:d},{:d}) took {:e} s".format(I, J, dt))
            self.matrix[I] = dt
            if w.queue.empty() and all([res.ready() for res in results]):
                break
            # end if
        # end while
        #
        logger.debug("Assembly complete!")
        return
    # end def assemble

    def get_block(self, I, J, queue):
        """
        A long running routine that returns the (I,J) block of the
        matrix using the queue.
        """
        logger = logging.getLogger(__file__ +".MyClass.get_block")
        t1 = time.time()
        msg = "Computing {:d} of {:d} for ({:d},{:d})"
        for it in range(J):
            logger.debug(msg.format(it, J, I, J))
            time.sleep(random.randrange(len(self.matrix)))
        # end for
        queue.put( (I, J, time.time() -t1) )
        return
    # end def get_block

    def new_assemble(self):
        """
        This is a revised method to assemble the blocks.  Instead of a
        queue to return the results, we use result from placing the
        worker in the pool.
        """
        logger = logging.getLogger(__file__ +".MyClass.new_assemble")
        logger.debug("Begin assembly...")
        #
        # Create a pool of workers.
        pool = multiprocessing.Pool()
        #
        # Populate the pool with the workers.  We need to save all of
        # the results so that we may check them.
        results = []
        for I in range(len(self.matrix)):
            J = random.randrange(len(self.matrix))
            # We use asynchronous apply so that we may have multiple
            # arguments and not have to wait for everything to complete.
            results.append( \
                    pool.apply_async(self.new_get_block, (I, J)) \
                )
        # end for
        pool.close()
        #
        while True:
            for res in results:
                if res.ready():
                    results.remove(res)
                    I, J, dt = res.get()
                    logger.info( \
                            "({:d},{:d}) took {:e} s".format(I, J, dt) \
                        )
                    self.matrix[I] = dt
                # end if
            # end for
            if len(results) < 1:
                break
            # end if
        # end while
        #
        logger.debug("Assembly complete!")
        return
    # end def new_assemble

    def new_get_block(self, I, J):
        """
        A long running routine that returns the (I,J) block of the
        matrix.
        """
        logger = logging.getLogger(__file__ +".MyClass.new_get_block")
        t1 = time.time()
        msg = "Computing {:d} of {:d} for ({:d},{:d})"
        for it in range(J):
            logger.debug(msg.format(it, J, I, J))
            time.sleep(random.randrange(len(self.matrix)))
        # end for
        return (I, J, time.time() -t1)
    # end def new_get_block

# end class MyClass

def main(args):
    """
    The main routine.
    """
    logger = logging.getLogger(__file__ +".main")
    test = MyClass(args.N)
    msg = "    {: 3d}: {:s}"
    logger.info("Initial matrix values:")
    for it in range(len(test.matrix)):
        logger.info(msg.format(it, str(test.matrix[it])))
    # end for

    if args.old:
        test.assemble()
    else:
        test.new_assemble()
    # end if

    logger.info("Final matrix values:")
    for it in range(len(test.matrix)):
        logger.info(msg.format(it, str(test.matrix[it])))
    # end for
    return 0
# end def main

if __name__ == "__main__":
    parser = argparse.ArgumentParser( \
            description=__info__, \
            formatter_class=argparse.RawDescriptionHelpFormatter \
        )
    parser.add_argument( \
            "N", help="Number of test blocks (default 10)", \
            nargs="?", type=int, default=10 \
        )
    parser.add_argument( \
            "--old", action="store_true", help="Use original version" \
        )
    parser.add_argument( \
            "-v", "--verbose", action="store_true", \
            help="Verbose output" \
        )
    args = parser.parse_args()

    logger = logging.getLogger(__file__)
    stream = logging.StreamHandler()
    stream.setFormatter( logging.Formatter("%(name)-32s: %(message)s") )
    if args.verbose: 
        stream.setLevel(logging.DEBUG)
    else:
        stream.setLevel(logging.INFO)
    # end if
    logger.addHandler(stream)

    sys.exit(main(args))
# end if

