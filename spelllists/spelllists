#!/usr/bin/env python
__doc__="""
Generate a spell list in HTML for a class.  This routine will parse the
'spells' directory for the files.  The format of the files is 

spell_name
    NAME:
    DESCRIPTION:
    SCHOOL:
    LEVEL:
    COMPONENTS:
    TIME:
    RANGE:
    AIM:
    DURATION:
    SAVE:
    SPELL_RESISTANCE:
    PAGE:

The LEVEL field is modeled after the Player's Handbook and is
dynamically evaluated for the input classes.  The name of the file is
used to sort the spells in the table.  I would highly recommend using
the spell name with all spaces and odd characters removed or replaced.

"""
import argparse
import logging
import os
import sys


arcane = { \
        "Bard"      : "Brd", \
        "Wizard"    : "Sor/Wiz" \
    }

divine = { \
        "Cleric"    : "Clr", \
        "Druid"     : "Drd", \
        "Ranger"    : "Rgr", \
    }

domains = { \
    }

classes = arcane.copy()
classes.update(divine)

def form_html(spelllist, CLASS):
    """
    Generate the HTML table page.  

    Given a nested dictionary of spells, generate an HTML page of
    tables.  The first set of keys is the level (currently, [0,9]).  The
    second set is the spell file name.  The order of the table is
    determined by the alphabetic order of the second set of keys.  The
    CLASS input is used to title the page and is arbitrary, but it is
    used to tag the 0-Level spells table header.

    """
    logger = logging.getLogger(__name__ +".form_html")
    html = """
    <!DOCTYPE html>
    <html>
    <head>
    <link rel='stylesheet' href='spells.css' type='text/css'>
    <title>{:s} Spells</title>
    </head>
    <body>
    """.format(CLASS)

    for level in range(10):
        if not level in spelllist:
            continue
        # end if

        # Make the table header
        if level == 0:
            caption = "0-Level"
            if CLASS in arcane:
                caption += " (Cantrips)"
            elif CLASS in divine:
                caption += " (Orisons)"
            # end if
        elif level == 1:
            caption = "1st-Level"
        elif level == 2:
            caption = "2nd-Level"
        elif level == 3:
            caption = "3rd-Level"
        else:
            caption = "{:d}th-Level".format(level)
        # end if

        html += """
        <div><table>
        <caption><h3>{:s}</h3></caption>
        <tr>
        <th>Spell</th>
        <th>Description</th>
        <th>School</th>
        <th>Comp.</th>
        <th>Time</th>
        <th>Range</th>
        <th>Aim</th>
        <th>Duration</th>
        <th>Save</th>
        <th>SR</th>
        <th>Page</th>
        </tr>
        """.format(caption)

        for spell in sorted(spelllist[level].keys()):
            html += spelllist[level][spell]
        # end for

        html += """
        </table></div></br>
        """
    # end for

    html += """
    </body>
    </html>
    """
    return html
# end def form_html

def spell_line(spellfile, CLASS=None):
    """
    Parse the given file and format the row for the table.

    A spell file is formatted as follows
    NAME: (spell name)
    DESCRIPTION: (brief description)
    SCHOOL: (school abbreviation)
    LEVEL: (class abbreviation and level) or (level number)
    COMPONENTS: (the text for the components)
    TIME: (casting time)
    RANGE: (the range)
    AIM: (target, effect, etc.)
    DURATION: (duration)
    SAVE: (allowed?)
    SPELL_RESISTANCE: (allowed?)
    PAGE: (page identifier)

    All lines are split at the ':' character and the row is formated as
    an html table row where the marker is the column class
        <td class='marker'>text</td>
    The text is not adjusted in any way.  
    
    The LEVEL field is used along with the second input to determine an
    early exit.  If CLASS is None, then the LEVEL field should simply be
    an integer.  This is to allow for personalized spell books.
    Otherwise, CLASS must be a value in either the 'classes' dictionary,
    or the 'domains' dictionary.  The LEVEL text is scanned for the
    CLASS marker and if not found, an early exit is performed.

    """
    logger = logging.getLogger(__name__ +".spell_line")
    msg = "Poorly formatted line in {:s}!\nLine: {:s}"

    spell = "<tr>" +os.linesep
    level = None
    with open(spellfile, "r") as fid:
        for line in fid:
            # Skip blank lines
            if line == "":
                continue
            # end def

            toks = line.split(":")
            if len(toks) < 2:
                logger.warn(msg.format(spellfile, line))
                level = None
                break
            # end if

            # Check for the class marker.
            if toks[0] == "LEVEL":
                try:
                    if CLASS is None:
                        level = int(toks[1])
                    else:
                        if CLASS in toks[1]:
                            tmp = toks[1].split(CLASS)[1].split(",")
                            level = int(tmp[0])
                        # end if
                    # end if
                except ValueError:
                    logger.warn(msg.format(spellfile, line))
                    level = None
                    break
                # end try

            else:
                spell += "<td class='{0:s}'>{1:s}</td>".format( \
                        toks[0].lower(), toks[1] \
                    ) +os.linesep
            # end if
        # end for
    # end with
    spell += "</tr>" +os.linesep

    return level, spell
# end def spell_line

if __name__=="__main__":
    parser = argparse.ArgumentParser(
            description=__doc__, \
            formatter_class=argparse.RawDescriptionHelpFormatter \
        )
    parser.add_argument( \
            "CLASS", help="The spell list to generate"
        )
    args = parser.parse_args()

    logging.basicConfig(level=logging.WARNING)

    if not args.CLASS in classes:
        logging.error("Unknown class {:s}!".format(args.CLASS))
        sys.exit(1)
    # end if
    mark = classes[args.CLASS]
    logging.debug("Looking for tag {:s}".format(mark))

    spelldir = "spells"
    spelllist = {}
    for spellfile in os.listdir(spelldir):
        # FIXME: Allow for domains and personalized spell books
        level, spell = spell_line( \
                os.path.join(spelldir, spellfile), mark \
            )
        if level is None:
            continue
        # end if

        if not level in spelllist:
            spelllist.update({level : {}})
        # end if
        spelllist[level].update({spellfile : spell})
    # end for

    html = form_html(spelllist, args.CLASS)
    print(html)

# end if

